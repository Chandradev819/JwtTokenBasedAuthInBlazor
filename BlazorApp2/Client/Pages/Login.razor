@inject HttpClient Http
@inject TokenAuthenticationStateProvider AuthStateProvider
@using Microsoft.AspNetCore.Components.Forms
@using BlazorApp2.Client.Helper
@using BlazorApp2.Shared
@using System.Net.Http.Json;
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json;
@using System.Text

<div class="container col-6">
    @if (loginFailure)
    {
        <div class="alert alert-danger">Your credentials did not work. Please try again.</div>
    }
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Login</h5>
              <EditForm Model="credentials" OnValidSubmit="SubmitCredentials">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Email address</label>
                    <InputText class="form-control" @bind-Value="credentials.Email" />
                    <ValidationMessage For="@(()=> credentials.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText type="password" class="form-control" @bind-Value="credentials.Password" />
                    <ValidationMessage For="@(()=> credentials.Password)" />
                </div>
                <button type="submit" class="btn btn-outline-primary btn-sm">Submit</button>
            </EditForm>
        </div>
    </div>
</div>
@code {
    Credentials credentials = new Credentials();
    bool loginFailure;

     EditForm loginform { get; set; }

    async Task SubmitCredentials()
    {
       
        //using (var httpClient = new HttpClient())
        //{
        //    StringContent content = new StringContent(JsonConvert.SerializeObject(credentials), Encoding.UTF8, "application/json");
 
        //    using (var response = await httpClient.PostAsync("https://localhost:7105/api/login", content))
        //    {
        //        string apiResponse = await response.Content.ReadAsStringAsync();
        //        var result = JsonConvert.DeserializeObject<LoginResult>(apiResponse);
        //    }
        //}

        var response =  await Http.PostAsJsonAsync("api/login", credentials);
        var result= await response.Content.ReadFromJsonAsync<LoginResult>();
        loginFailure = result?.Token == null;
        if (!loginFailure)
        {
            await AuthStateProvider.SetTokenAsync(result.Token, result.Expiry);
        }
    }
}